#Set minimum safe version(s)
$SafeVersions = @("18.18.2", "20.8.1")
$SafeVersions = $SafeVersions.ForEach{ [version]$_ }

#Set Baseline for vulnerability status
$Vulnerable = "False"

#Define the app properties to filter from registry use partial wildcards to catch any minor variations on display names
$RegFilters = @(
    [pscustomobject]@{ Property = "DisplayName"; Operator = "Like"; String = "*node*js*" }
    [pscustomobject]@{ Property = "DisplayName"; Operator = "NotLike"; String = "" }
    [pscustomobject]@{ Property = "Publisher"; Operator = "Like"; String = "" }
    [pscustomobject]@{ Property = "InstallLocation"; Operator = "Eq"; String = "" }
)

#Create a filter format template
$FilterTemplate = '$_.{0} -{1} "{2}"'
#Build a combined filter string using the format template, based on the $RegFilters variables with a String value
#-Replace '(.+)', '($0)' encapsulates each individual filter in parentheses, which is not strictly necessary, but can help readability
$AllFilters = $RegFilters.Where({ $_.String }).foreach({ $FilterTemplate -f $_.Property, $_.Operator, $_.String }) -Replace '(.+)', '($0)' -Join ' -and '
#Convert the string to a scriptblock
$AllFiltersScript = [scriptblock]::Create($AllFilters)

#Get app details from registry
$AppReg = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall
$AppNameReg = @($AppReg | Get-ItemProperty | Where-Object -FilterScript $AllFiltersScript)

#Compare each returned app's version number with the corresponding package version
foreach ($App in $AppNameReg) {
    #Define the currently installed version number
    [version]$CurrentVersion = $App.DisplayVersion
    $CurrentVersionMajor = $CurrentVersion.Major
    #Find the version in the $NodeJSSafeVersions array that has matching Major version
    $MatchingAppVersion = $SafeVersions | Where-Object { $_.Major -eq $CurrentVersionMajor }

    #Check if the currently installed version is greater than or equal to the minimum safe version and set variable if it is not compliant
    if ($CurrentVersion -lt $MatchingAppVersion) {
        $Vulnerable = "True"
    }
}

#Output vulnerability status
Write-Host $Vulnerable
